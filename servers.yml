Description: Template file to deploy server resources using cloudformation

Parameters:
    EnvironmentName:
        Description: Environtment name using to be prefix for all resources
        Type: String
    AMIServerId:
        Description: AMI ID for EC2 instances.
        Type: String
    InstanceType:
        Description: EC2 instance type
        Type: String
    S3BucketName:
        Description: S3 bucket name for webapp resources
        Type: String

Resources:
    ## Load balancer security group
    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    ## Web app security group
    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    ## IAM Role for EC2 instance only access s3 with readonly permisson
    EC2ReadOnlyS3Role:
        Type: AWS::IAM::Role
        Properties:
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action:
                          - 'sts:AssumeRole'
            Path: "/"

    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
                - !Ref EC2ReadOnlyS3Role

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    aws s3 cp s3:${S3BucketName}/index.html /var/www/html
            ImageId: !Ref AMIServerId
            IamInstanceProfile: !Ref EC2InstanceProfile
            SecurityGroups:
                - Ref: WebServerSecurityGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                      VolumeSize: "10"

    ## Scaling group for ec2 instances
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: "2"
            MaxSize: "5"
            TargetGroupARNs:
                - Ref: WebAppTargetGroup

    ## Loader balancer for web app
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN1"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN2"
            SecurityGroups:
                - Ref: LBSecurityGroup

    ## Loader balancer listener and rules
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: "80"
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref "WebAppTargetGroup"
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref "Listener"
            Priority: 1

    ## Target group
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
    WebAppLBURLName:
        Description: Public URL of the Load Balancer
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName


